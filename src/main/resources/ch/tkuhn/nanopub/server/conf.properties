# Configuration file for nanopub server
#
# These configurations can be overridden by the content of a file called
# 'local.conf.properties' (not under version control).

# Enter here the public URL to access this nanopub server:
#public-url=http://example.org/nanopub-server/
public-url=

# Enter here the name and email address of the server admin:
#admin=Tobias Kuhn <kuhntobias@gmail.com>
admin=

# Connection to MongoDB:
mongodb.host=localhost
mongodb.port=27017
mongodb.dbname=nanopub-server
# Important: each nanopub server needs its own DB. The DB cannot be shared!

# Enabling this means that everybody can upload new nanopubs:
post-nanopubs-enabled=true

# Enabling this means that everybody can register new peers:
post-peers-enabled=true

# Enabling this means that other peers are contacted:
peer-scan-enabled=true

# Enabling this means that nanopubs found at peers are fetched and stored:
# (WARNING: It will download ALL nanopubs it can find!)
collect-nanopubs-enabled=false

# Enabling this means that a nanopublication is checked against its trusty
# URI before returned to a GET request.
check-nanopubs-on-get=false

# Server waits specified number of milliseconds after it has been triggered to
# scan its peers for synchronizing with them. The smaller the value the more
# frequently peers are checked for updates.
wait-ms-before-peer-scan=60000

# The page size of the journal (only has an effect when new journal is created):
init-page-size=1000

# Initial peers:
initial-peers=http://np.inn.ac/

# If set to 'true', the URIs of all nanopubs are logged when loaded:
log-nanopub-loading=false

# If set, the given directory is checked regularly and the contained nanopub
# files are loaded into the database. The webapp process needs read and write
# permission. A subdirectory 'processing' is created for files being processed
# and another subdirectory 'done' for finished files.
load-dir=

# Is automatically set by Maven:
version=${pom.version}
build-date=${timestamp}
